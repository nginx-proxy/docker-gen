// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package plugin

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin(in *jlexer.Lexer, out *Volume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Path":
			out.Path = string(in.String())
		case "HostPath":
			out.HostPath = string(in.String())
		case "ReadWrite":
			out.ReadWrite = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin(out *jwriter.Writer, in Volume) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"HostPath\":"
		out.RawString(prefix)
		out.String(string(in.HostPath))
	}
	{
		const prefix string = ",\"ReadWrite\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadWrite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Volume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Volume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Volume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Volume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin1(in *jlexer.Lexer, out *SwarmNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Address":
			(out.Address).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin1(out *jwriter.Writer, in SwarmNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SwarmNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SwarmNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SwarmNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SwarmNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin1(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin2(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Running":
			out.Running = bool(in.Bool())
		case "Health":
			(out.Health).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin2(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Running\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Running))
	}
	{
		const prefix string = ",\"Health\":"
		out.RawString(prefix)
		(in.Health).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin2(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin3(in *jlexer.Lexer, out *RuntimeContainer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "Addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]Address, 0, 0)
					} else {
						out.Addresses = []Address{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Address
					(v1).UnmarshalEasyJSON(in)
					out.Addresses = append(out.Addresses, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]Network, 0, 0)
					} else {
						out.Networks = []Network{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Network
					(v2).UnmarshalEasyJSON(in)
					out.Networks = append(out.Networks, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Gateway":
			out.Gateway = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Hostname":
			out.Hostname = string(in.String())
		case "NetworkMode":
			out.NetworkMode = string(in.String())
		case "Image":
			(out.Image).UnmarshalEasyJSON(in)
		case "Env":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Env = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Env)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Volumes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Volumes = make(map[string]Volume)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 Volume
					(v4).UnmarshalEasyJSON(in)
					(out.Volumes)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Node":
			(out.Node).UnmarshalEasyJSON(in)
		case "Labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Labels = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.Labels)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "IP":
			out.IP = string(in.String())
		case "IP6LinkLocal":
			out.IP6LinkLocal = string(in.String())
		case "IP6Global":
			out.IP6Global = string(in.String())
		case "Mounts":
			if in.IsNull() {
				in.Skip()
				out.Mounts = nil
			} else {
				in.Delim('[')
				if out.Mounts == nil {
					if !in.IsDelim(']') {
						out.Mounts = make([]Mount, 0, 0)
					} else {
						out.Mounts = []Mount{}
					}
				} else {
					out.Mounts = (out.Mounts)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Mount
					(v6).UnmarshalEasyJSON(in)
					out.Mounts = append(out.Mounts, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "State":
			(out.State).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin3(out *jwriter.Writer, in RuntimeContainer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"Addresses\":"
		out.RawString(prefix)
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Addresses {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Networks\":"
		out.RawString(prefix)
		if in.Networks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Networks {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Gateway\":"
		out.RawString(prefix)
		out.String(string(in.Gateway))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"NetworkMode\":"
		out.RawString(prefix)
		out.String(string(in.NetworkMode))
	}
	{
		const prefix string = ",\"Image\":"
		out.RawString(prefix)
		(in.Image).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Env\":"
		out.RawString(prefix)
		if in.Env == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Env {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Volumes\":"
		out.RawString(prefix)
		if in.Volumes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Volumes {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				(v12Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Node\":"
		out.RawString(prefix)
		(in.Node).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Labels {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				out.String(string(v13Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"IP6LinkLocal\":"
		out.RawString(prefix)
		out.String(string(in.IP6LinkLocal))
	}
	{
		const prefix string = ",\"IP6Global\":"
		out.RawString(prefix)
		out.String(string(in.IP6Global))
	}
	{
		const prefix string = ",\"Mounts\":"
		out.RawString(prefix)
		if in.Mounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Mounts {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		(in.State).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RuntimeContainer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RuntimeContainer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RuntimeContainer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RuntimeContainer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin3(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin4(in *jlexer.Lexer, out *PluginContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Containers":
			if in.IsNull() {
				in.Skip()
				out.Containers = nil
			} else {
				in.Delim('[')
				if out.Containers == nil {
					if !in.IsDelim(']') {
						out.Containers = make([]*RuntimeContainer, 0, 8)
					} else {
						out.Containers = []*RuntimeContainer{}
					}
				} else {
					out.Containers = (out.Containers)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *RuntimeContainer
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(RuntimeContainer)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Containers = append(out.Containers, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Env":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Env = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 string
					v17 = string(in.String())
					(out.Env)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Docker":
			(out.Docker).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin4(out *jwriter.Writer, in PluginContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Containers\":"
		out.RawString(prefix[1:])
		if in.Containers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Containers {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Env\":"
		out.RawString(prefix)
		if in.Env == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Env {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Docker\":"
		out.RawString(prefix)
		(in.Docker).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PluginContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PluginContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PluginContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PluginContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin4(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin5(in *jlexer.Lexer, out *Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IP":
			out.IP = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Gateway":
			out.Gateway = string(in.String())
		case "EndpointID":
			out.EndpointID = string(in.String())
		case "IPv6Gateway":
			out.IPv6Gateway = string(in.String())
		case "GlobalIPv6Address":
			out.GlobalIPv6Address = string(in.String())
		case "MacAddress":
			out.MacAddress = string(in.String())
		case "GlobalIPv6PrefixLen":
			out.GlobalIPv6PrefixLen = int(in.Int())
		case "IPPrefixLen":
			out.IPPrefixLen = int(in.Int())
		case "Internal":
			out.Internal = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin5(out *jwriter.Writer, in Network) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Gateway\":"
		out.RawString(prefix)
		out.String(string(in.Gateway))
	}
	{
		const prefix string = ",\"EndpointID\":"
		out.RawString(prefix)
		out.String(string(in.EndpointID))
	}
	{
		const prefix string = ",\"IPv6Gateway\":"
		out.RawString(prefix)
		out.String(string(in.IPv6Gateway))
	}
	{
		const prefix string = ",\"GlobalIPv6Address\":"
		out.RawString(prefix)
		out.String(string(in.GlobalIPv6Address))
	}
	{
		const prefix string = ",\"MacAddress\":"
		out.RawString(prefix)
		out.String(string(in.MacAddress))
	}
	{
		const prefix string = ",\"GlobalIPv6PrefixLen\":"
		out.RawString(prefix)
		out.Int(int(in.GlobalIPv6PrefixLen))
	}
	{
		const prefix string = ",\"IPPrefixLen\":"
		out.RawString(prefix)
		out.Int(int(in.IPPrefixLen))
	}
	{
		const prefix string = ",\"Internal\":"
		out.RawString(prefix)
		out.Bool(bool(in.Internal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Network) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Network) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Network) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Network) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin5(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin6(in *jlexer.Lexer, out *Mount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Source":
			out.Source = string(in.String())
		case "Destination":
			out.Destination = string(in.String())
		case "Driver":
			out.Driver = string(in.String())
		case "Mode":
			out.Mode = string(in.String())
		case "RW":
			out.RW = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin6(out *jwriter.Writer, in Mount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"Destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"Driver\":"
		out.RawString(prefix)
		out.String(string(in.Driver))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"RW\":"
		out.RawString(prefix)
		out.Bool(bool(in.RW))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin6(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin7(in *jlexer.Lexer, out *Health) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin7(out *jwriter.Writer, in Health) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Health) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Health) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Health) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Health) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin7(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin8(in *jlexer.Lexer, out *DockerImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Registry":
			out.Registry = string(in.String())
		case "Repository":
			out.Repository = string(in.String())
		case "Tag":
			out.Tag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin8(out *jwriter.Writer, in DockerImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Registry\":"
		out.RawString(prefix[1:])
		out.String(string(in.Registry))
	}
	{
		const prefix string = ",\"Repository\":"
		out.RawString(prefix)
		out.String(string(in.Repository))
	}
	{
		const prefix string = ",\"Tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DockerImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DockerImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DockerImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DockerImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin8(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin9(in *jlexer.Lexer, out *Docker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "NumContainers":
			out.NumContainers = int(in.Int())
		case "NumImages":
			out.NumImages = int(in.Int())
		case "Version":
			out.Version = string(in.String())
		case "ApiVersion":
			out.ApiVersion = string(in.String())
		case "GoVersion":
			out.GoVersion = string(in.String())
		case "OperatingSystem":
			out.OperatingSystem = string(in.String())
		case "Architecture":
			out.Architecture = string(in.String())
		case "CurrentContainerID":
			out.CurrentContainerID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin9(out *jwriter.Writer, in Docker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"NumContainers\":"
		out.RawString(prefix)
		out.Int(int(in.NumContainers))
	}
	{
		const prefix string = ",\"NumImages\":"
		out.RawString(prefix)
		out.Int(int(in.NumImages))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"ApiVersion\":"
		out.RawString(prefix)
		out.String(string(in.ApiVersion))
	}
	{
		const prefix string = ",\"GoVersion\":"
		out.RawString(prefix)
		out.String(string(in.GoVersion))
	}
	{
		const prefix string = ",\"OperatingSystem\":"
		out.RawString(prefix)
		out.String(string(in.OperatingSystem))
	}
	{
		const prefix string = ",\"Architecture\":"
		out.RawString(prefix)
		out.String(string(in.Architecture))
	}
	{
		const prefix string = ",\"CurrentContainerID\":"
		out.RawString(prefix)
		out.String(string(in.CurrentContainerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Docker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Docker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Docker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Docker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin9(l, v)
}
func easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin10(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IP":
			out.IP = string(in.String())
		case "IP6LinkLocal":
			out.IP6LinkLocal = string(in.String())
		case "IP6Global":
			out.IP6Global = string(in.String())
		case "Port":
			out.Port = string(in.String())
		case "HostPort":
			out.HostPort = string(in.String())
		case "Proto":
			out.Proto = string(in.String())
		case "HostIP":
			out.HostIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin10(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"IP6LinkLocal\":"
		out.RawString(prefix)
		out.String(string(in.IP6LinkLocal))
	}
	{
		const prefix string = ",\"IP6Global\":"
		out.RawString(prefix)
		out.String(string(in.IP6Global))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"HostPort\":"
		out.RawString(prefix)
		out.String(string(in.HostPort))
	}
	{
		const prefix string = ",\"Proto\":"
		out.RawString(prefix)
		out.String(string(in.Proto))
	}
	{
		const prefix string = ",\"HostIP\":"
		out.RawString(prefix)
		out.String(string(in.HostIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71062b96EncodeGithubComNginxProxyDockerGenPlugin10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71062b96DecodeGithubComNginxProxyDockerGenPlugin10(l, v)
}
